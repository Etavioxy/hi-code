const int cL='a', cR='z';
struct node{
	node*fa;
	struct nxt{
		node*a[cR-cL+1];
		node*& operator[](int x){
			return a[x-cL];
		}
	}c;
}d[N];
int tot_d;
node* ac_insert(int n,char*s){
	node*e = d;
	rep(i,1,n){
		if( e->c[s[i]]==0 ) e->c[s[i]]=&d[++tot_d];
		e = e->c[s[i]];
	}
	return e;
}
void ac_build(){
	queue <node*> q;
	rep(i,cL,cR) if( d->c[i]!=0 ){
		q.push(d->c[i]);
		d->c[i]->fa = d;
	}else d->c[i] = d;
	while( q.empty()==0 ){
		node*e = q.front();
		q.pop();
		rep(i,cL,cR) if( e->c[i]!=0 ){
			q.push(e->c[i]);
			e->c[i]->fa = e->fa->c[i];
		}else e->c[i] = e->fa->c[i];
	}
}
void ac_match(int n,char*s){
	node*e = d;
	rep(i,1,n){
		e = e->c[s[i]];
	}
}
