class BIT_TRE{
private:
	struct node{
		int size;
		node*c[2];
		#define lch c[0]
		#define rch c[1]
	};
	node d[N*350];
	int tot;
	int n,s;
	void add(node*e,int x,int k){
		e->size+= k;
		int l=1, r=s;
		while( l!=r ){
			int mid = (l+r)/2;
			bool o = x > mid;
			if( e->c[o]==d ) e->c[o] = &(d[++tot]=*d);
			e = e->c[o];
			e->size += k;
			if( o ) l=mid+1;
			else r=mid;
		}
	}
	vector<node*> L,R;
	int find_kth(int k){
		int l=1, r=s;
		while( l!=r ){
			int mid = (l+r)/2;
			int lsum= 0;
			rep(i,0,(int)L.size()-1) lsum-= L[i]->lch->size;
			rep(i,0,(int)R.size()-1) lsum+= R[i]->lch->size;
			bool o= k > lsum;
			rep(i,0,(int)L.size()-1) L[i]= L[i]->c[o];
			rep(i,0,(int)R.size()-1) R[i]= R[i]->c[o];
			if( o ) l=mid+1, k-=lsum;
			else r=mid;
		}
		return l;
	}
	node*ver[N];
public:
	void init(int n0,int s0){
		n = n0, s = s0;
		d->lch = d->rch = d;
		rep(i,1,n) ver[i] = &(d[++tot]=*d);
	}
	#define lowbit(x) ((x)&-(x))
	void add(int i,int x,int k){
		for(;i<=n;i+=lowbit(i)) add(ver[i],x,k);
	}
	int find_kth(int l,int r,int k){
		l--;
		L.clear();
		R.clear();
		for(;l;l-=lowbit(l)) L.push_back(ver[l]);
		for(;r;r-=lowbit(r)) R.push_back(ver[r]);
		return find_kth(k);
	}
};
