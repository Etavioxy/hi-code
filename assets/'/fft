using Poly = vector<ll>;
int set2(int n){ return 1<<((int)log2(n-1)+1); }
using ld = long double;
struct cmpx{
	ld x,y; cmpx(){} cmpx(ll x0):x(x0){}
	friend cmpx operator+(const cmpx&a,const cmpx&b){ return (cmpx){a.x+b.x,a.y+b.y}; }
	friend cmpx operator-(const cmpx&a,const cmpx&b){ return (cmpx){a.x-b.x,a.y-b.y}; }
	friend cmpx operator*(const cmpx&a,const cmpx&b){ return (cmpx){a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x}; }
	friend cmpx operator*(const cmpx&a,const ld b){ return (cmpx){a.x*b,a.y*b}; }
};
using Polyx = vector<cmpx>;
const ld Pi = acos(-1);
int init_rev_n,rev[N];
void init_rev(int n){
	if( init_rev_n==n ) return ;
	init_rev_n = n; int t = log2(n);
	rep(i,1,n-1) rev[i] = (rev[i>>1]>>1)|((i&1)<<(t-1));
}
void FFT(Polyx&A,int IDFT){
	int n = A.size(); init_rev(n);
	rep(i,1,n-1) if( i<rev[i] ) swap(A[i],A[rev[i]]);
	for(int t=1; t<n ; t<<=1){
		cmpx w0 = (cmpx){cos(Pi/t),IDFT*sin(Pi/t)};
		for(int l=0; l<n ; l+=t*2){
			register cmpx w=(cmpx){1,0};
			for(register int i=0; i<t ; i++,w=w*w0){
				cmpx x = A[l+i], y = w*A[l+t+i];
				A[l+i] = x+y;
				A[l+t+i] = x-y;
			}
		}
	}
	if( IDFT==-1 ){
		rep(i,0,n-1) A[i] = A[i]*(1.0/n);
	}
}
