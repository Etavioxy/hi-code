class SQ{
private:
	enum{B=400};
	int pos[N],ed[B],a[N];
	vector<int> b[B];
	void rebuild(int t){
		b[t].clear();
		rep(i,ed[t-1]+1,ed[t]) b[t].push_back(a[i]);
		sort(b[t].begin(),b[t].end());
	}
public:
	void init(int n,int*a0){
		memcpy(a,a0,sizeof(int)*(n+1));
		int block=sqrt(n*log2(n)), T=0;
		while( ed[T]!=n ) ed[T+1] = min(n,ed[T]+block), T++;
		rep(t,1,T){
			rep(i,ed[t-1]+1,ed[t]) pos[i] = t;
			rebuild(t);
		}
	}
	void add(int x,int y){
		int t = pos[x];
		b[t].erase(lower_bound(b[t].begin(),b[t].end(),a[x]));
		b[t].insert(upper_bound(b[t].begin(),b[t].end(),a[x]=y),y);
	}
	int query(int l,int r,int x){
		int L=pos[l], R=pos[r];
		int ans = 0;
		if( L==R ){
			rep(i,l,r) if( a[i]<=x ) ans++;
			return ans;
		}
		rep(i,l,ed[L]) if( a[i]<=x ) ans++;
		rep(t,L+1,R-1) ans += upper_bound(b[t].begin(),b[t].end(),x)-b[t].begin()-1;
		rep(i,ed[R-1]+1,r) if( a[i]<=x ) ans++;
		return ans;
	}
};
