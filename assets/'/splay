struct dt{ ll sum; dt(){} dt(ll x):sum(x){} };
dt NIL = 0;
dt operator+(const dt&a,const dt&b){
	return a.sum+b.sum;
}
class Splay{
private:
	struct node{
		node*fa,*c[2];
		dt x,x0;
		int key,size;
		#define lch c[0]
		#define rch c[1]
		void update(){
			size = lch->size + 1 + rch->size;
			x = lch->x + x0 + rch->x;
		}
		void downdate(){ }
	}d[N];
	node*&Root(){ return d->lch; }
	bool chk(node*e){ return e->fa->rch==e; }
	node*get(node*x,bool o,node*y){
		return x->c[o]=y, y->fa=x;
	}
	void rotate(node*e){
		bool o=chk(e), ox=chk(e->fa);
		node*x=e->fa, *y=x->fa, *w=e->c[o^1];
		y->c[ox]=e, e->c[o^1]=x, x->c[o]=w;
		( w!=d ? w->fa=x:0 ), x->fa=e, e->fa=y;
		x->update(), e->update();
	}
	node*splay(node*e){
		while( e->fa!=d ){
			node*x = e->fa;
			if( x->fa!=d ) rotate(chk(e)^chk(x)?e:x);
			rotate(e);
		} return e;
	}
	node*find(node*e,int k){
		node*o = d;
		while( e!=d ){
			o=e, e->downdate();
			int lsz=e->lch->size;
			if( k==lsz+1 ) return splay(e);
			( k<=lsz ? e=e->lch:(k-=lsz+1,e=e->rch) );
		} return splay(o),d;
	}
	int query(node*e,int k){
		int ans = 0; node*o = d;
		while( e!=d ){
			o=e, e->downdate();
			int ek=e->key, lsz=e->lch->size;
			( k<ek ? e=e->lch:(ans+=lsz+1,e=e->rch) );
		} return splay(o),ans;
	}
	node*split(node*x,bool o){
		if( x==d ) return Root();
		node*y = splay(x)->c[o];
		return x->c[o]=y->fa=d, x->update(), y;
	}
	node*merge(node*x,bool o,node*y){
		if( x==d ) return y;
		splay(x), x = find(x,o?x->size:1);
		return get(x,o,y), x->update(), x;
	}
	node*build(int l,int r){
		if( l>r ) return d;
		int mid = (l+r)/2;
		node*e = d+mid;
		get(e,0,build(l,mid-1));
		get(e,1,build(mid+1,r));
		return e->update(),e;
	}
public:
	void init(int n,int*a){
		*d = (node){d,d,d,NIL,NIL};
		rep(i,1,n) d[i] = (node){d,d,d,NIL,NIL,a[i],1};
		Root() = build(1,n), d->fa = d;
	}
	void insert(int id,dt x,int key){
		node*e = &( d[id] = (node){d,d,d,x,x,key,1} );
		node*L = find(Root(),query(Root(),key));
		node*R = split(L,1);
		Root() = merge(merge(e,0,L),1,R);
	}
	void erase(int id){
		node*e = splay(d+id);
		node*L = split(e,0);
		node*R = split(e,1);
		Root() = merge(L,1,R);
	}
	dt query(int l,int r){
		node*L = find(Root(),query(Root(),l-1));
		node*e = find(Root(),query(Root(),r));
		if( L==e ) return NIL;
		if( L!=d ) split(L,1);
		node*R = split(e,1);
		dt ans = e->x;
		Root() = merge(merge(e,0,L),1,R);
		return ans;
	}
};
